/**
 * Healthcare Analytics Setup Script
 * Initializes analytics configuration for zweitmeinung.ng
 */

const fs = require('fs')
const path = require('path')

console.log('🏥 Setting up Healthcare Analytics for zweitmeinung.ng')
console.log('=' .repeat(60))

// Environment configuration
const environments = {
  development: {
    name: 'Development',
    domain: 'localhost',
    storybookUrl: 'http://localhost:6006',
    nextjsUrl: 'http://localhost:3000',
    anonymizeIp: true,
    debug: true
  },
  staging: {
    name: 'Staging', 
    domain: 'staging.zweitmeinung.ng',
    storybookUrl: 'https://storybook-staging.zweitmeinung.ng',
    nextjsUrl: 'https://staging.zweitmeinung.ng',
    anonymizeIp: true,
    debug: false
  },
  production: {
    name: 'Production',
    domain: '.zweitmeinung.ng',
    storybookUrl: 'https://design.zweitmeinung.ng', 
    nextjsUrl: 'https://zweitmeinung.ng',
    anonymizeIp: true,
    debug: false
  }
}

// Healthcare Analytics Configuration Template
const analyticsEnvTemplate = `# Healthcare Analytics Environment Configuration
# Generated by healthcare analytics setup

# Google Analytics (GDPR-compliant for medical platform)
NEXT_PUBLIC_GA_MEASUREMENT_ID=""
GA_PROPERTY_ID=""

# Vercel Analytics
VERCEL_ANALYTICS_ID=""

# Healthcare-specific settings
HEALTHCARE_ANALYTICS_ENABLED=true
HEALTHCARE_GDPR_COMPLIANCE=true
HEALTHCARE_ANONYMIZE_IP=true

# Medical context settings
TRACK_MEDICAL_COMPONENTS=true
TRACK_ACCESSIBILITY_USAGE=true
TRACK_EMERGENCY_INTERACTIONS=true

# Privacy settings (GDPR compliance for medical data)
RESPECT_DNT=true
CONSENT_REQUIRED=true
COOKIE_DOMAIN="{{DOMAIN}}"
COOKIE_SAMESITE="Strict"

# Environment-specific
NODE_ENV="{{ENV}}"
STORYBOOK_URL="{{STORYBOOK_URL}}"
NEXTJS_URL="{{NEXTJS_URL}}"
DEBUG_ANALYTICS="{{DEBUG}}"
`

// Medical Event Categories Configuration
const medicalEventCategories = {
  emergency: {
    events: [
      'emergency_banner_view',
      'emergency_contact_click', 
      'emergency_form_start',
      'emergency_redirect'
    ],
    priority: 'critical',
    tracking: 'immediate'
  },
  medical: {
    events: [
      'doctor_profile_view',
      'specialty_selection',
      'medical_faq_interaction',
      'consultation_flow_start'
    ],
    priority: 'high', 
    tracking: 'batched'
  },
  accessibility: {
    events: [
      'a11y_feature_used',
      'high_contrast_enabled',
      'screen_reader_detected',
      'keyboard_navigation_used',
      'large_touch_targets_accessed'
    ],
    priority: 'high',
    tracking: 'immediate'
  },
  component: {
    events: [
      'healthcare_component_view',
      'healthcare_component_interaction',
      'component_error',
      'component_performance'
    ],
    priority: 'medium',
    tracking: 'batched'
  },
  storybook: {
    events: [
      'story_view',
      'addon_usage',
      'design_system_usage',
      'component_documentation_view'
    ],
    priority: 'medium', 
    tracking: 'batched'
  },
  privacy: {
    events: [
      'consent_given',
      'consent_withdrawn',
      'gdpr_compliance_check',
      'data_anonymization'
    ],
    priority: 'critical',
    tracking: 'immediate'
  }
}

// Setup functions
function createEnvironmentFile(env = 'development') {
  const config = environments[env]
  if (!config) {
    console.error(`❌ Unknown environment: ${env}`)
    return false
  }
  
  console.log(`\n📝 Creating .env.analytics.${env}`)
  
  let envContent = analyticsEnvTemplate
    .replace(/\{\{DOMAIN\}\}/g, config.domain)
    .replace(/\{\{ENV\}\}/g, env)
    .replace(/\{\{STORYBOOK_URL\}\}/g, config.storybookUrl)
    .replace(/\{\{NEXTJS_URL\}\}/g, config.nextjsUrl)
    .replace(/\{\{DEBUG\}\}/g, config.debug.toString())
  
  const envFilePath = path.join(process.cwd(), `.env.analytics.${env}`)
  
  try {
    fs.writeFileSync(envFilePath, envContent)
    console.log(`✅ Created: ${envFilePath}`)
    return true
  } catch (error) {
    console.error(`❌ Failed to create ${envFilePath}:`, error.message)
    return false
  }
}

function createEventCategoriesFile() {
  console.log('\n📝 Creating medical-event-categories.json')
  
  const categoriesPath = path.join(__dirname, 'medical-event-categories.json')
  
  try {
    fs.writeFileSync(categoriesPath, JSON.stringify(medicalEventCategories, null, 2))
    console.log(`✅ Created: ${categoriesPath}`)
    return true
  } catch (error) {
    console.error(`❌ Failed to create event categories:`, error.message)
    return false
  }
}

function createStorybookAddonConfig() {
  console.log('\n📝 Checking Storybook analytics addon configuration')
  
  const storybookConfigPath = path.join(process.cwd(), '.storybook', 'main.ts')
  
  if (!fs.existsSync(storybookConfigPath)) {
    console.log('⚠️ Storybook main.ts not found, skipping addon configuration')
    return false
  }
  
  try {
    let storybookConfig = fs.readFileSync(storybookConfigPath, 'utf8')
    
    // Check if analytics addon is already configured
    if (!storybookConfig.includes('healthcare-analytics')) {
      console.log('📝 Adding healthcare analytics to Storybook configuration')
      
      // Add healthcare analytics addon reference
      const addonComment = `
  // Healthcare Analytics Integration
  // Tracks healthcare component usage and accessibility metrics`
      
      storybookConfig = storybookConfig.replace(
        'addons: [',
        `addons: [${addonComment}`
      )
      
      console.log('✅ Storybook configuration ready for healthcare analytics')
    } else {
      console.log('✅ Healthcare analytics already configured in Storybook')
    }
    
    return true
  } catch (error) {
    console.error(`❌ Failed to update Storybook config:`, error.message)
    return false
  }
}

function displayNextSteps() {
  console.log('\n🎯 Next Steps for Healthcare Analytics Setup:')
  console.log('=' .repeat(60))
  
  console.log('\n1. 🔑 Configure Analytics IDs:')
  console.log('   • Set NEXT_PUBLIC_GA_MEASUREMENT_ID in .env.analytics.development')
  console.log('   • Set VERCEL_ANALYTICS_ID for production deployment')
  console.log('   • Ensure all IDs are GDPR-compliant for medical platform')
  
  console.log('\n2. 🏥 Medical Privacy Compliance:')
  console.log('   • Review GDPR settings in analytics configuration')
  console.log('   • Verify anonymization is enabled for all medical data')
  console.log('   • Test consent management integration')
  
  console.log('\n3. 🎨 Storybook Integration:')
  console.log('   • Import analytics in Storybook preview.js')
  console.log('   • Test component tracking in development')
  console.log('   • Validate accessibility event tracking')
  
  console.log('\n4. 🧪 Testing:')
  console.log('   • Run: npm run analytics:test')
  console.log('   • Verify events in Google Analytics debug view')
  console.log('   • Test medical component interactions')
  
  console.log('\n5. 📊 Deployment:')
  console.log('   • Create production environment file')
  console.log('   • Configure Vercel Analytics')
  console.log('   • Set up healthcare-specific dashboards')
  
  console.log('\n🔗 Healthcare Analytics Resources:')
  console.log('   • GDPR Compliance: https://gdpr-info.eu/')
  console.log('   • Medical Data Privacy: https://www.bundesaerztekammer.de/')
  console.log('   • Accessibility Metrics: https://www.w3.org/WAI/WCAG21/quickref/')
}

// Main setup execution
async function setupHealthcareAnalytics() {
  console.log('🚀 Starting healthcare analytics setup...\n')
  
  let successCount = 0
  
  // Create environment files
  Object.keys(environments).forEach(env => {
    if (createEnvironmentFile(env)) {
      successCount++
    }
  })
  
  // Create event categories
  if (createEventCategoriesFile()) {
    successCount++
  }
  
  // Configure Storybook addon
  if (createStorybookAddonConfig()) {
    successCount++
  }
  
  console.log(`\n📈 Setup Summary:`)
  console.log(`✅ ${successCount} configuration files created`)
  console.log(`🏥 Healthcare analytics ready for zweitmeinung.ng`)
  console.log(`🔒 GDPR-compliant configuration applied`)
  
  displayNextSteps()
}

// Run setup if called directly
if (require.main === module) {
  setupHealthcareAnalytics().catch(console.error)
}

module.exports = {
  setupHealthcareAnalytics,
  createEnvironmentFile,
  createEventCategoriesFile,
  medicalEventCategories,
  environments
}